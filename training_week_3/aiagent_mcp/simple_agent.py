# simple_agent.py
import asyncio
import json
from anthropic import Anthropic
from mcp import ClientSession, StdioServerParameters

class SimpleFileAgent:
    def __init__(self, anthropic_api_key):
        self.anthropic = Anthropic(api_key=anthropic_api_key)
        self.mcp_session = None
        self.conversation_history = []
    
    async def connect_to_mcp_server(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É"""
        server_params = StdioServerParameters(
            command="python",
            args=["file_server.py"]
        )
        
        self.mcp_session = ClientSession(server_params)
        await self.mcp_session.initialize()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        tools = await self.mcp_session.list_tools()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        for tool in tools.tools:
            print(f"- {tool.name}: {tool.description}")
    
    async def use_mcp_tool(self, tool_name, arguments):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞"""
        if not self.mcp_session:
            raise Exception("MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
        
        result = await self.mcp_session.call_tool(tool_name, arguments)
        return result.content[0].text if result.content else "–ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
    
    def analyze_request(self, user_input):
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω—É–∂–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
        system_prompt = """
        –¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞–±–æ—Ç–µ —Å —Ñ–∞–π–ª–∞–º–∏. –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:
        - list_files: –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        - read_file: –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        - create_file: —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        - search_in_files: –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª–∞—Ö
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏:
        1. –ö–∞–∫–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
        2. –ö–∞–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥–∞—Ç—å
        
        –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {
            "tool": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞",
            "arguments": {"–ø–∞—Ä–∞–º–µ—Ç—Ä": "–∑–Ω–∞—á–µ–Ω–∏–µ"},
            "explanation": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
        }
        """
        
        response = self.anthropic.messages.create(
            model="claude-3-sonnet-20240229",
            max_tokens=500,
            system=system_prompt,
            messages=[{
                "role": "user",
                "content": user_input
            }]
        )
        
        try:
            return json.loads(response.content[0].text)
        except:
            return {
                "tool": None,
                "arguments": {},
                "explanation": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å"
            }
    
    async def process_request(self, user_input):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        print(f"\nü§ñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: {user_input}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        analysis = self.analyze_request(user_input)
        print(f"üìã –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π: {analysis['explanation']}")
        
        if analysis['tool']:
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ MCP
                result = await self.use_mcp_tool(
                    analysis['tool'], 
                    analysis['arguments']
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                final_response = self.anthropic.messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=1000,
                    messages=[{
                        "role": "user",
                        "content": f"""
                        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–æ—Å–∏–ª: {user_input}
                        
                        –Ø –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ: {analysis['explanation']}
                        
                        –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}
                        
                        –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö.
                        """
                    }]
                )
                
                return final_response.content[0].text
                
            except Exception as e:
                return f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"
        else:
            return "‚ùì –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞
async def main():
    # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API –∫–ª—é—á Anthropic
    agent = SimpleFileAgent("your-anthropic-api-key")
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é AI –∞–≥–µ–Ω—Ç–∞...")
    await agent.connect_to_mcp_server()
    
    print("\n‚úÖ –ê–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    print("–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥:")
    print("- –ü–æ–∫–∞–∂–∏ —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ")
    print("- –ü—Ä–æ—á–∏—Ç–∞–π —Ñ–∞–π–ª example.txt")
    print("- –°–æ–∑–¥–∞–π —Ñ–∞–π–ª test.txt —Å —Ç–µ–∫—Å—Ç–æ–º '–ü—Ä–∏–≤–µ—Ç –º–∏—Ä'")
    print("- –ù–∞–π–¥–∏ —Å–ª–æ–≤–æ 'python' –≤ —Ñ–∞–π–ª–∞—Ö")
    
    while True:
        try:
            user_input = input("\nüë§ –í–∞—à –∑–∞–ø—Ä–æ—Å: ")
            if user_input.lower() in ['–≤—ã—Ö–æ–¥', 'quit', 'exit']:
                break
                
            response = await agent.process_request(user_input)
            print(f"\nü§ñ –û—Ç–≤–µ—Ç: {response}")
            
        except KeyboardInterrupt:
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")

if __name__ == "__main__":
    asyncio.run(main())
